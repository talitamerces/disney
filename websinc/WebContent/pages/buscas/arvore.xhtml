<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"> 

<h:head>
<style>

.node rect {
	  fill: #96c2ff;
	  stroke: #96c2ff;
	  stroke-width: 1.5px;
	  border-radius: 4px; 
	}

	.node text { font: 10px sans-serif; font-weight:bold; }

	.link {
	  fill: none;
	  stroke: steelblue;
	  stroke-width: 1px;
	}
</style>
</h:head> 
<body> 
<script src="./Collapsible Tree Example_files/d3.v3.min.js"></script>
	
<script>


// ************** Generate the tree diagram	 *****************
var margin = {top: 20, right: 120, bottom: 20, left: 120},
	width = 14500 - margin.right - margin.left,
	height = 11500 - margin.top - margin.bottom;
	
var i = 0;

var tree = d3.layout.tree()
	.size([height, width]);

var diagonal = d3.svg.diagonal()
	.projection(function(d) { return [d.x, d.y]; });

var svg = d3.select("body").append("svg")
	.attr("width", width + margin.right + margin.left)
	.attr("height", height + margin.top + margin.bottom)
  .append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var treeData = [
 <h:outputText value="#{controleBuscasSintaticas.json}"/>


];

// load the external data
//d3.json("treeData.json", function(error, treeData) {

  root = treeData[0];
  update(root);
//});

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
	  links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 50; d.x=d.x*1.2; });

  // Declare the nodes?
  var node = svg.selectAll("g.node")
	  .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
	  .attr("class", "node")
	  .attr("transform", function(d) { 
		  return "translate(" + d.x + "," + d.y + ")"; });

  nodeEnter.append("rect")
	  .attr("width", function(d){
		  	return d.name.length*12 + "px"
		  	
		})
      .attr("height", "1.5em")
      .attr("x", function(d){
		  	return (-(d.name.length/3)) + "em"
		})
      .attr("y", "-0.75em")
      .attr("rx", 5)
      .attr("ry", 5)
	  .style("fill", "#eee");

  nodeEnter.append("text")
	  .attr("x", function(d) { 
		  return 0; })
// 		  return d.children || d._children ? -13 : 13; })
	  .attr("dy", ".40em")
	  .attr("text-anchor", function(d) { 
		  return "middle"; })
	  .text(function(d) { return d.name; })
	  .style("fill-opacity", 1);

  // Declare the links?
  var link = svg.selectAll("path.link")
	  .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
	  .attr("class", "link")
	  .attr("d", diagonal);

}

</script>
	
</body> 
</html>
